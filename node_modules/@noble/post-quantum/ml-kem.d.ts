type ParameterSet = {
    N: number;
    K: number;
    Q: number;
    ETA1: number;
    ETA2: number;
    du: number;
    dv: number;
    RBGstrength: number;
};
export declare const PARAMS: Record<string, ParameterSet>;
/**
 * FIPS-203 ML-KEM.
 */
export declare const ml_kem512: {
    publicKeyLen: number;
    msgLen: number;
    keygen: (seed?: Uint8Array) => {
        publicKey: Uint8Array;
        secretKey: Uint8Array;
    };
    encapsulate: (publicKey: Uint8Array, msg?: Uint8Array) => {
        cipherText: Uint8Array;
        sharedSecret: Uint8Array;
    };
    decapsulate: (cipherText: Uint8Array, secretKey: Uint8Array) => Uint8Array;
};
export declare const ml_kem768: {
    publicKeyLen: number;
    msgLen: number;
    keygen: (seed?: Uint8Array) => {
        publicKey: Uint8Array;
        secretKey: Uint8Array;
    };
    encapsulate: (publicKey: Uint8Array, msg?: Uint8Array) => {
        cipherText: Uint8Array;
        sharedSecret: Uint8Array;
    };
    decapsulate: (cipherText: Uint8Array, secretKey: Uint8Array) => Uint8Array;
};
export declare const ml_kem1024: {
    publicKeyLen: number;
    msgLen: number;
    keygen: (seed?: Uint8Array) => {
        publicKey: Uint8Array;
        secretKey: Uint8Array;
    };
    encapsulate: (publicKey: Uint8Array, msg?: Uint8Array) => {
        cipherText: Uint8Array;
        sharedSecret: Uint8Array;
    };
    decapsulate: (cipherText: Uint8Array, secretKey: Uint8Array) => Uint8Array;
};
export {};
//# sourceMappingURL=ml-kem.d.ts.map