/*! noble-post-quantum - MIT License (c) 2024 Paul Miller (paulmillr.com) */
import { bytes as abytes } from '@noble/hashes/_assert';
import { TypedArray, randomBytes as randb } from '@noble/hashes/utils';
export declare const ensureBytes: typeof abytes;
export declare const randomBytes: typeof randb;
export declare function equalBytes(a: Uint8Array, b: Uint8Array): boolean;
export type Signer = {
    signRandBytes: number;
    keygen: (seed: Uint8Array) => {
        secretKey: Uint8Array;
        publicKey: Uint8Array;
    };
    sign: (secretKey: Uint8Array, msg: Uint8Array, random?: Uint8Array) => Uint8Array;
    verify: (publicKey: Uint8Array, msg: Uint8Array, sig: Uint8Array) => boolean;
};
export interface Coder<F, T> {
    encode(from: F): T;
    decode(to: T): F;
}
export interface BytesCoder<T> extends Coder<T, Uint8Array> {
    encode: (data: T) => Uint8Array;
    decode: (bytes: Uint8Array) => T;
}
export type BytesCoderLen<T> = BytesCoder<T> & {
    bytesLen: number;
};
type UnCoder<T> = T extends BytesCoder<infer U> ? U : never;
type SplitOut<T extends (number | BytesCoderLen<any>)[]> = {
    [K in keyof T]: T[K] extends number ? Uint8Array : UnCoder<T[K]>;
};
export declare function splitCoder<T extends (number | BytesCoderLen<any>)[]>(...lengths: T): BytesCoder<SplitOut<T>> & {
    bytesLen: number;
};
export declare function vecCoder<T>(c: BytesCoderLen<T>, vecLen: number): BytesCoderLen<T[]>;
export declare function cleanBytes(...list: (TypedArray | TypedArray[])[]): void;
export declare function getMask(bits: number): number;
export {};
//# sourceMappingURL=utils.d.ts.map